diff --git a/src/criteria/criteria-factory.ts b/src/criteria/criteria-factory.ts
index f89951e..d139131 100644
--- a/src/criteria/criteria-factory.ts
+++ b/src/criteria/criteria-factory.ts
@@ -3,6 +3,7 @@ import type { CriteriaSchema, SelectedAliasOf } from './types/schema.types.js';
 import { InnerJoinCriteria } from './join/inner.join-criteria.js';
 import { LeftJoinCriteria } from './join/left.join-criteria.js';
 import { OuterJoinCriteria } from './join/outer.join-criteria.js';
+import type { ValidSchema } from './criteria.js';
 
 /**
  * Provides static methods for creating instances of different types of `Criteria`.
@@ -26,7 +27,7 @@ export class CriteriaFactory {
   static GetCriteria<
     CSchema extends CriteriaSchema,
     Alias extends SelectedAliasOf<CSchema>,
-  >(schema: CSchema, alias: Alias): RootCriteria<CSchema, Alias> {
+  >(schema: ValidSchema<CSchema>, alias: Alias): RootCriteria<CSchema, Alias> {
     return new RootCriteria(schema, alias);
   }
 
@@ -47,7 +48,10 @@ export class CriteriaFactory {
   static GetInnerJoinCriteria<
     CSchema extends CriteriaSchema,
     Alias extends SelectedAliasOf<CSchema>,
-  >(schema: CSchema, alias: Alias): InnerJoinCriteria<CSchema, Alias> {
+  >(
+    schema: ValidSchema<CSchema>,
+    alias: Alias,
+  ): InnerJoinCriteria<CSchema, Alias> {
     return new InnerJoinCriteria(schema, alias);
   }
 
@@ -67,7 +71,10 @@ export class CriteriaFactory {
   static GetLeftJoinCriteria<
     CSchema extends CriteriaSchema,
     Alias extends SelectedAliasOf<CSchema>,
-  >(schema: CSchema, alias: Alias): LeftJoinCriteria<CSchema, Alias> {
+  >(
+    schema: ValidSchema<CSchema>,
+    alias: Alias,
+  ): LeftJoinCriteria<CSchema, Alias> {
     return new LeftJoinCriteria(schema, alias);
   }
 
@@ -87,7 +94,10 @@ export class CriteriaFactory {
   static GetOuterJoinCriteria<
     CSchema extends CriteriaSchema,
     Alias extends SelectedAliasOf<CSchema>,
-  >(schema: CSchema, alias: Alias): OuterJoinCriteria<CSchema, Alias> {
+  >(
+    schema: ValidSchema<CSchema>,
+    alias: Alias,
+  ): OuterJoinCriteria<CSchema, Alias> {
     return new OuterJoinCriteria(schema, alias);
   }
 }
diff --git a/src/criteria/criteria.ts b/src/criteria/criteria.ts
index d59322c..67a7735 100644
--- a/src/criteria/criteria.ts
+++ b/src/criteria/criteria.ts
@@ -25,6 +25,10 @@ import type {
 import type { PivotJoin, SimpleJoin } from './types/join-parameter.types.js';
 import type { FilterGroup } from './filter/filter-group.js';
 
+export type ValidSchema<CSchema extends CriteriaSchema> =
+  CSchema['identifier_field'] extends CSchema['fields'][number]
+    ? CSchema
+    : `Schema identifier_field '${CSchema['identifier_field']}' must be one of the schema's defined fields. Schema: ${CSchema['source_name']}`;
 /**
  * Abstract base class for constructing query criteria.
  * It provides a fluent API for defining filters, joins, selections, ordering, and pagination.
@@ -71,9 +75,7 @@ export abstract class Criteria<
    * @protected
    */
   constructor(
-    schema: TSchema['identifier_field'] extends TSchema['fields'][number]
-      ? TSchema
-      : `Schema identifier_field '${TSchema['identifier_field']}' must be one of the schema's defined fields. Schema: ${TSchema['source_name']}`,
+    schema: ValidSchema<TSchema>,
     protected _alias: CurrentAlias,
   ) {
     if (typeof schema === 'string') {
@@ -93,7 +95,7 @@ export abstract class Criteria<
     this._source_name = schema.source_name;
   }
 
-  private get schema(): TSchema {
+  protected get schema(): TSchema {
     return this._schema;
   }
 
@@ -385,6 +387,7 @@ export abstract class Criteria<
         this.schema.joins.find((join) => join.alias === criteriaToJoin.alias)
           ?.metadata ?? {},
       parent_schema_metadata: this.schema.metadata ?? {},
+      parent_identifier: this.identifierField,
     };
     this._joinManager.addJoin(criteriaToJoin, fullJoinParameters);
     return this;
diff --git a/src/criteria/join/inner.join-criteria.ts b/src/criteria/join/inner.join-criteria.ts
index d973075..bcf542d 100644
--- a/src/criteria/join/inner.join-criteria.ts
+++ b/src/criteria/join/inner.join-criteria.ts
@@ -4,7 +4,7 @@ import type {
   SelectedAliasOf,
 } from '../types/schema.types.js';
 import type { PivotJoin, SimpleJoin } from '../types/join-parameter.types.js';
-import { Criteria } from '../criteria.js';
+import { Criteria, type ValidSchema } from '../criteria.js';
 import type { ICriteriaVisitor } from '../types/visitor-interface.types.js';
 
 /**
@@ -48,6 +48,9 @@ export class InnerJoinCriteria<
    * @returns {InnerJoinCriteria<CSchema, Alias>} A new, reset `RootCriteria` instance.
    */
   resetCriteria(): InnerJoinCriteria<CSchema, Alias> {
-    return new InnerJoinCriteria(this.schema, this._alias);
+    return new InnerJoinCriteria(
+      this.schema as ValidSchema<CSchema>,
+      this._alias,
+    );
   }
 }
diff --git a/src/criteria/join/left.join-criteria.ts b/src/criteria/join/left.join-criteria.ts
index 58e2b60..1227d5a 100644
--- a/src/criteria/join/left.join-criteria.ts
+++ b/src/criteria/join/left.join-criteria.ts
@@ -4,7 +4,7 @@ import type {
   SelectedAliasOf,
 } from '../types/schema.types.js';
 import type { PivotJoin, SimpleJoin } from '../types/join-parameter.types.js';
-import { Criteria } from '../criteria.js';
+import { Criteria, type ValidSchema } from '../criteria.js';
 import type { ICriteriaVisitor } from '../types/visitor-interface.types.js';
 
 /**
@@ -47,6 +47,9 @@ export class LeftJoinCriteria<
    * @returns {LeftJoinCriteria<CSchema, Alias>} A new, reset `RootCriteria` instance.
    */
   resetCriteria(): LeftJoinCriteria<CSchema, Alias> {
-    return new LeftJoinCriteria(this.schema, this._alias);
+    return new LeftJoinCriteria(
+      this.schema as ValidSchema<CSchema>,
+      this._alias,
+    );
   }
 }
diff --git a/src/criteria/join/outer.join-criteria.ts b/src/criteria/join/outer.join-criteria.ts
index 66ff186..1ae0d07 100644
--- a/src/criteria/join/outer.join-criteria.ts
+++ b/src/criteria/join/outer.join-criteria.ts
@@ -4,7 +4,7 @@ import type {
   SelectedAliasOf,
 } from '../types/schema.types.js';
 import type { PivotJoin, SimpleJoin } from '../types/join-parameter.types.js';
-import { Criteria } from '../criteria.js';
+import { Criteria, type ValidSchema } from '../criteria.js';
 import type { ICriteriaVisitor } from '../types/visitor-interface.types.js';
 
 /**
@@ -47,6 +47,9 @@ export class OuterJoinCriteria<
    * @returns {OuterJoinCriteria<CSchema, Alias>} A new, reset `RootCriteria` instance.
    */
   resetCriteria(): OuterJoinCriteria<CSchema, Alias> {
-    return new OuterJoinCriteria(this.schema, this._alias);
+    return new OuterJoinCriteria(
+      this.schema as ValidSchema<CSchema>,
+      this._alias,
+    );
   }
 }
diff --git a/src/criteria/root.criteria.ts b/src/criteria/root.criteria.ts
index f08978d..4136946 100644
--- a/src/criteria/root.criteria.ts
+++ b/src/criteria/root.criteria.ts
@@ -1,4 +1,4 @@
-import { Criteria } from './criteria.js';
+import { Criteria, type ValidSchema } from './criteria.js';
 import type { CriteriaSchema, SelectedAliasOf } from './types/schema.types.js';
 import type { ICriteriaVisitor } from './types/visitor-interface.types.js';
 
@@ -38,6 +38,6 @@ export class RootCriteria<
    * @returns {RootCriteria<CSchema, Alias>} A new, reset `RootCriteria` instance.
    */
   resetCriteria(): RootCriteria<CSchema, Alias> {
-    return new RootCriteria(this.schema, this._alias);
+    return new RootCriteria(this.schema as ValidSchema<CSchema>, this._alias);
   }
 }
diff --git a/src/criteria/test/criteria.test.ts b/src/criteria/test/criteria.test.ts
index 4ff5813..93fdaf8 100644
--- a/src/criteria/test/criteria.test.ts
+++ b/src/criteria/test/criteria.test.ts
@@ -4,7 +4,7 @@ import { OrderDirection } from '../order/order.js';
 import { InnerJoinCriteria } from '../join/inner.join-criteria.js';
 import { LeftJoinCriteria } from '../join/left.join-criteria.js';
 import type { StoredJoinDetails } from '../types/join-utility.types.js';
-import type { CriteriaSchema, SelectedAliasOf } from '../types/schema.types.js';
+
 import { FilterOperator, LogicalOperator } from '../types/operator.types.js';
 import {
   PermissionSchema,
@@ -12,16 +12,26 @@ import {
   PostSchema,
   UserSchema,
 } from './fake-entities.js';
+import {
+  type CriteriaSchema,
+  GetTypedCriteriaSchema,
+  type SelectedAliasOf,
+} from '../types/schema.types.js';
 
 const testJoinsData = (
   joinDetails: StoredJoinDetails<CriteriaSchema>,
   joinParameter: { join_field: string | object; parent_field: string | object },
-  criteria: RootCriteria<CriteriaSchema, SelectedAliasOf<CriteriaSchema>>,
+  parentCriteria: RootCriteria<CriteriaSchema, SelectedAliasOf<CriteriaSchema>>,
 ) => {
   expect(joinDetails.parameters.join_field).toBe(joinParameter.join_field);
   expect(joinDetails.parameters.parent_field).toBe(joinParameter.parent_field);
-  expect(joinDetails.parameters.parent_alias).toBe(criteria.alias);
-  expect(joinDetails.parameters.parent_source_name).toBe(criteria.sourceName);
+  expect(joinDetails.parameters.parent_alias).toBe(parentCriteria.alias);
+  expect(joinDetails.parameters.parent_source_name).toBe(
+    parentCriteria.sourceName,
+  );
+  expect(joinDetails.parameters.parent_identifier).toBe(
+    parentCriteria.identifierField,
+  );
 };
 
 describe('Criteria', () => {
@@ -418,7 +428,7 @@ describe('Criteria', () => {
       );
     });
 
-    it('should add an inner join', () => {
+    it('should add an inner join and correctly populate parent_identifier', () => {
       const userJoinCriteria = new InnerJoinCriteria(UserSchema, 'publisher');
       const joinParameter = {
         parent_field: 'user_uuid',
@@ -440,7 +450,36 @@ describe('Criteria', () => {
       }
     });
 
-    it('should add multiple joins', () => {
+    it('should add a many-to-many join and correctly populate parent_identifier', () => {
+      const userCriteriaRoot = new RootCriteria(UserSchema, 'users');
+      const permissionJoinCriteria = new InnerJoinCriteria(
+        PermissionSchema,
+        'permissions',
+      );
+      const joinParameter = {
+        pivot_source_name: 'user_permission_pivot',
+        parent_field: { pivot_field: 'user_uuid', reference: 'uuid' },
+        join_field: { pivot_field: 'permission_uuid', reference: 'uuid' },
+      } as const;
+
+      userCriteriaRoot.join(permissionJoinCriteria, joinParameter);
+
+      const joinsArray = userCriteriaRoot.joins;
+      expect(joinsArray.length).toBe(1);
+      const joinEntry = joinsArray[0];
+      expect(joinEntry).toBeDefined();
+      if (joinEntry) {
+        expect(joinEntry.criteria.alias).toBe('permissions');
+        expect(joinEntry.criteria).toBeInstanceOf(InnerJoinCriteria);
+        testJoinsData(joinEntry, joinParameter, userCriteriaRoot);
+        expect(joinEntry.criteria).toBe(permissionJoinCriteria);
+        expect(joinEntry.parameters.parent_identifier).toBe(
+          UserSchema.identifier_field,
+        );
+      }
+    });
+
+    it('should add multiple joins and correctly populate parent_identifier for each', () => {
       const userJoinCriteria = new InnerJoinCriteria(UserSchema, 'publisher');
       const userJoinParameter = {
         parent_field: 'user_uuid',
@@ -483,7 +522,7 @@ describe('Criteria', () => {
       }
     });
 
-    it('should replace a join if the same alias is used', () => {
+    it('should replace a join if the same alias is used and check parent_identifier', () => {
       const userJoinCriteria1 = new InnerJoinCriteria(UserSchema, 'publisher');
       const userJoinCriteria2 = new LeftJoinCriteria(UserSchema, 'publisher');
 
@@ -688,14 +727,3 @@ describe('Criteria', () => {
     });
   });
 });
-
-/**
- * Helper function to create a typed schema for testing.
- * This is a simplified version of GetTypedCriteriaSchema for test purposes
- * if the main one causes issues with complex generic inference in tests.
- */
-function GetTypedCriteriaSchema<const TInput extends CriteriaSchema>(
-  schema: TInput,
-): TInput {
-  return schema;
-}
diff --git a/src/criteria/types/join-parameter.types.ts b/src/criteria/types/join-parameter.types.ts
index db7a837..fe12361 100644
--- a/src/criteria/types/join-parameter.types.ts
+++ b/src/criteria/types/join-parameter.types.ts
@@ -23,7 +23,7 @@ export type PivotJoin<
   parent_source_name: ParentSchema['source_name'];
   /** The alias used for the parent entity in the query. */
   parent_alias: ParentSchema['alias'][number];
-
+  parent_identifier: FieldOfSchema<ParentSchema>;
   /** The source name (table name) of the pivot table. */
   pivot_source_name: string;
   /** Configuration for the join field on the parent side, referencing the pivot table. */
@@ -82,6 +82,7 @@ export type SimpleJoin<
   parent_source_name: ParentSchema['source_name'];
   /** The alias used for the parent entity in the query. */
   parent_alias: ParentSchema['alias'][number];
+  parent_identifier: FieldOfSchema<ParentSchema>;
   /**
    * The field name in the parent schema used for the join condition.
    * Must be a valid field from `ParentSchema['fields']`.
